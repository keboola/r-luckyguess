% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keboola.r.luckyguess.R
\docType{class}
\name{LGApplication-class}
\alias{LGApplication}
\alias{LGApplication-class}
\title{Application which serves as a backend for LuckyGuess component}
\description{
Application which serves as a backend for LuckyGuess component
}
\section{Methods}{

\describe{
\item{\code{getCleanData(types, cleanData)}}{Apply column types detected by LG to a data frame.
\subsection{Parameters}{\itemize{
\item{\code{types} Data frame with contents of table with LG datatypes 
(this table is usually named \code{VAI__1} in SAPI).}
\item{\code{cleanData} A data frame with actual data, its columns are
expected to be listed as rows in the types table.}
}}
\subsection{Return Value}{data.frame supplied in cleanData parameter with
applied data types.}}

\item{\code{getConvertedDataType(type, mode)}}{Convert LG type definition to an R data type.
\subsection{Parameters}{\itemize{
\item{\code{type} LG data type string (\code{integer}, \code{datetime}, etc.).}
\item{\code{mode} LG variable mode (\code{continuous}, \code{discrete}).}
}}
\subsection{Return Value}{String with R data type name}}

\item{\code{checkParam(data, name, dataType, fullName)}}{Recursive function to check a parameter provided in JSON data. 
Note that this function is called for each parameter (name) separately and it
tries to find that \code{name} in the provided \code{data}. It will
return the data possibly with coerced values.
\subsection{Parameters}{\itemize{
\item{\code{data} JSON parsed data.}
\item{\code{name} Name of the parameter, either a string or a vector 
of characters if the parameter is nested.}
\item{\code{dataType} String name of the R data type required.}
\item{\code{fullName} Arbitrary named used for global identification of the parameter.}
}}
\subsection{Return Value}{List with partially modified data.}}

\item{\code{initialize(args = NULL)}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{args} Optional name of data directory, if not supplied then it
will be read from command line argument or environment KBC_DATADIR.}
}}
\subsection{Return Value}{Response body - either list or string in case the body cannot be parsed as JSON.}}

\item{\code{installModulePackages(packages = c())}}{Install and load all required libraries.
\subsection{Parameters}{\itemize{
\item{\code{packages} Vector of package names.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{run()}}{Main application function, this should be overriden in child class.
\subsection{Return Value}{NULL}}

\item{\code{saveDataFrame(dataFrame, tableName, rowNumbers = FALSE, incremental = FALSE,
  forcedColumnTypes)}}{Save a dataframe to database using bulk inserts.
The table will be created to accomodate to data frame columns.
\subsection{Parameters}{\itemize{
\item{\code{dataFrame} A data frame, column names of data frame 
must correspond to column names of table.}
\item{\code{tableName} Name of the table.}
\item{\code{rowNumbers} If true then the table will contain a column 
named \code{row_num} with sequential row index.}
\item{\code{incremental} If true then the table will not be recreated, 
only data will be inserted.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{saveFileName(name, tags)}}{Save reference to a file.
\subsection{Parameters}{\itemize{
\item{\code{name} String physical file path.}
\item{\code{tags} Character vector of file tags.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{saveFiles()}}{Save uploaded files (move them to out directory and create manifests)
\subsection{Return Value}{TRUE}}

\item{\code{saveValue(name, value, grouping = 0)}}{Save an arbitrary simple value.
\subsection{Parameters}{\itemize{
\item{\code{key} String key name.}
\item{\code{value} Arbitrary value.}
\item{\code{grouping} Optional grouping of values if they are related.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{silence(command)}}{Silence all but error output from a command.
Note: this function does nothing if the debugMode variable is set to TRUE.
\subsection{Parameters}{\itemize{
\item{\code{command} Arbitrary command.}
}}
\subsection{Return Value}{ Command return value.}}

\item{\code{startUp()}}{Start up the Application, initialize working directory and database tables.
\subsection{Return Value}{TRUE}}

\item{\code{validate()}}{Save uploaded files (move them to out directory and create manifests)
\subsection{Return Value}{TRUE}}
}}

